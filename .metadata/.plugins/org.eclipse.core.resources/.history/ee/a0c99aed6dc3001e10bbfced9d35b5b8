package AlgLin;

public class Helder extends SysLin {
    private SysTriangInfUnite L;
    private SysDiagonal D;
    private SysTriangSupUnite R;

    public Helder(Matrice matrice, Vecteur secondMembre) throws IrregularSysLinException {
        super(matrice, secondMembre);
    }

    public void factorLDR() {
        int degre = getOrdre();
        Matrice Li_ = new Matrice(degre, degre);
        Matrice Di_ = new Matrice(degre, degre);
        Matrice Ri_ = new Matrice(degre, degre);
        Matrice A = getMatriceSystem();

        // Initialisation de L, D et R
        for (int i = 0; i < degre; i++) {
            for (int j = 0; j < degre; j++) {
                if (i == j) {
                    Di_.remplacecoef(i, j, A.getCoeff(i, j));
                    Li_.remplacecoef(i, j, 1);
                    Ri_.remplacecoef(i, j, 1);
                } else if (i > j) {
                    Li_.remplacecoef(i, j, A.getCoeff(i, j));
                } else {
                    Ri_.remplacecoef(i, j, A.getCoeff(i, j));
                }
            }
        }

        // Calcul des coefficients L, D et R en utilisant l'algo du TD
        for (int i = 0; i < degre; i++) {
            for (int j = 0; j < i; j++) {
            	//Calcul des coefficients de L
                double sumL = 0;
                for (int k = 0; k < j; k++) {
                    sumL += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, j);
                }
                Li_.remplacecoef(i, j, (A.getCoeff(i, j) - sumL) / Di_.getCoeff(j, j));
            }
            
            //Calcul des coefficients de D
            double sumD = 0;
            for (int k = 0; k < i; k++) {
                sumD += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, i);
            }
            Di_.remplacecoef(i, i, A.getCoeff(i, i) - sumD);
            
            //Calcul des coefficients de R
            for (int j = i + 1; j < degre; j++) {
                double sumR = 0;
                for (int k = 0; k < i; k++) {
                    sumR += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, j);
                }
                Ri_.remplacecoef(i, j, (A.getCoeff(i, j) - sumR) / Di_.getCoeff(i, i));
            }
        }

        // Création des systèmes correspondants
        try {
            L = new SysTriangInfUnite(Li_, getSecondMembre());
            D = new SysDiagonal(Di_, getSecondMembre());
            R = new SysTriangSupUnite(Ri_, getSecondMembre());
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la création des systèmes");
        }
    }

    @Override
    public Vecteur resolution() {
        factorLDR();
        Vecteur x = new Vecteur(getOrdre());
        Vecteur y = new Vecteur(getOrdre());
        Vecteur z = new Vecteur(getOrdre());
        try {
            L.setSecondMembre(getSecondMembre());
            y = L.resolution();
            D.setSecondMembre(y);
            z = D.resolution();
            R.setSecondMembre(z);
            x = R.resolution();
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la résolution");
        }
        return x;
    }

    public Vecteur resolutionPartielle() {
        Vecteur x = new Vecteur(getOrdre());
        Vecteur y = new Vecteur(getOrdre());
        Vecteur z = new Vecteur(getOrdre());
        try {
            L.setSecondMembre(getSecondMembre());
            y = L.resolution();
            D.setSecondMembre(y);
            z = D.resolution();
            R.setSecondMembre(z);
            x = R.resolution();
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la résolution");
        }
        return x;
    }
    
	public void setSecondMembre(Vecteur newSecondMembre) {
		super.setSecondMembre(newSecondMembre);
		L.setSecondMembre(newSecondMembre);
		D.setSecondMembre(newSecondMembre);
		R.setSecondMembre(newSecondMembre);
	}

    public SysTriangInfUnite getL() {
        return L;
    }

    public SysDiagonal getD() {
        return D;
    }

    public SysTriangSupUnite getR() {
        return R;
    }

    public static void main(String[] args) throws IrregularSysLinException {
    	//Cas 1 : Ax = b  
        Matrice matrice = new Matrice("./resources/matrice1.txt");
        Vecteur secondMembre = new Vecteur(new double[] {3, 5, 8});

        Helder helder = new Helder(matrice, secondMembre);
        Vecteur solution = helder.resolution();

        System.out.println("la matrice L :\n" + helder.getL().getMatriceSystem().toString());
        System.out.println("la matrice D :\n " + helder.getD().getMatriceSystem().toString());
        System.out.println("la matrice R :\n " + helder.getR().getMatriceSystem().toString());
        System.out.println("Solution du système : " + solution.toString());
        
        //Cas 2 : A^2x = b
        Matrice Acarre = Matrice.produit(matrice, matrice);
        Vecteur secondMembre2 = new Vecteur("./resources/secondeMembre.txt");
        System.out.println("\n\n\n");
        Helder helder2 = new Helder(Acarre, secondMembre2);
        Vecteur solution2 = helder2.resolution();
        System.out.println("la matrice L :\n" + helder2.getL().getMatriceSystem().toString());
        System.out.println("la matrice D :\n " + helder2.getD().getMatriceSystem().toString());
        System.out.println("la matrice R :\n " + helder2.getR().getMatriceSystem().toString());
        System.out.println("Solution du système : " + solution2.toString());
        
    }
}
