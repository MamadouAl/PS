
public class Mat3Diag extends Matrice {

	public Mat3Diag(int dim1, int dim2) {
		super(dim1, dim2);
		if (dim1 != 3) {
			throw new IllegalArgumentException("La matrice doit ne doit avoir que 3 lignes");
		}
	}

	public Mat3Diag(double[][] tableau) {
		super(tableau);
		if (tableau.length != 3) {
			throw new IllegalArgumentException("La matrice doit ne doit avoir que 3 lignes");
		}
	}

	public Mat3Diag(int dim) {
		super(3, dim);
	}

	/**
	 * Permet de faire le produit d'une matrice tridiagonale par un vecteur
	 */
	public static Vecteur produit(Mat3Diag matA, Vecteur vect) {
		int taille = vect.getTaille();

		// VÃ©rification des tailles
		if (matA.nbColonne() != taille || matA.nbLigne() != 3) {
			throw new IllegalArgumentException(
					"La taille de la matrice tridiagonale A et du vecteur x ne sont pas compatibles.");
		}
		Vecteur result = new Vecteur(taille);
		double[] a = new double[taille]; // coeff de la sous-diagonale
		double[] b = new double[taille]; // coeff de la diagonale
		double[] c = new double[taille]; // coeff de la sur-diagonale

		// Initialisation des coefficients
		for (int i = 0; i < taille; i++) {
			a[i] = matA.getCoeff(0, i);
			b[i] = matA.getCoeff(1, i);
			c[i] = matA.getCoeff(2, i);
		}

		// Calcul des produits
		for (int i = 0; i < taille; i++) {
			double di = 0.0;
			if (i > 0) {
				di += a[i] * vect.getCoeff(i - 1);
			}
			di += b[i] * vect.getCoeff(i);
			if (i < taille - 1) {
				di += c[i] * vect.getCoeff(i + 1);
			}
			result.remplacecoef(i, di);
		}
		return result;
	}

	public static void main(String[] args) throws Exception {
		double[][] tableau = {{ 0, 3, 6, 9}, { 1, 4, 7, 10 }, { 2, 5, 8, 0 }};
        Mat3Diag matriceA = new Mat3Diag(tableau);
		Vecteur vect = new Vecteur(new double[] { 1, 2, 3});
 
        Vecteur y = Mat3Diag.produit(matriceA, vect);
		System.out.println("Mat3Diag A: \n" + matriceA);
		System.out.println("Vecteur : " + vect);
        System.out.println("Resultat du produit : "+ y);

	}

}
