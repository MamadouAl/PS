package AlgLin;

public class Helder extends SysLin {
    private SysTriangInfUnite l;
    private SysDiagonal d;
    private SysTriangSupUnite r;

    public Helder(Matrice matrice, Vecteur secondMembre) throws IrregularSysLinException {
        super(matrice, secondMembre);
    }

    public void factorLDR() {
        int n = getOrdre();
        Matrice Li_ = new Matrice(n, n);
        Matrice Di_ = new Matrice(n, n);
        Matrice Ri_ = new Matrice(n, n);
        Matrice A = getMatriceSystem();

        // Initialisation des matrices L, D et R
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    Di_.remplacecoef(i, j, A.getCoeff(i, j));
                    Li_.remplacecoef(i, j, 1);
                    Ri_.remplacecoef(i, j, 1);
                } else if (i > j) {
                    Li_.remplacecoef(i, j, A.getCoeff(i, j));
                } else {
                    Ri_.remplacecoef(i, j, A.getCoeff(i, j));
                }
            }
        }

        // Calcul des coefficients L, D et R en u
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                double sumL = 0;
                for (int k = 0; k < j; k++) {
                    sumL += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, j);
                }
                Li_.remplacecoef(i, j, (A.getCoeff(i, j) - sumL) / Di_.getCoeff(j, j));
            }

            double sumD = 0;
            for (int k = 0; k < i; k++) {
                sumD += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, i);
            }
            Di_.remplacecoef(i, i, A.getCoeff(i, i) - sumD);

            for (int j = i + 1; j < n; j++) {
                double sumR = 0;
                for (int k = 0; k < i; k++) {
                    sumR += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, j);
                }
                Ri_.remplacecoef(i, j, (A.getCoeff(i, j) - sumR) / Di_.getCoeff(i, i));
            }
        }

        // Création des systèmes correspondants
        try {
            l = new SysTriangInfUnite(Li_, getSecondMembre());
            d = new SysDiagonal(Di_, getSecondMembre());
            r = new SysTriangSupUnite(Ri_, getSecondMembre());
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la création des systèmes");
        }
    }

    @Override
    public Vecteur resolution() {
        factorLDR();
        Vecteur x = new Vecteur(getOrdre());
        Vecteur y = new Vecteur(getOrdre());
        Vecteur z = new Vecteur(getOrdre());
        try {
            l.setSecondMembre(getSecondMembre());
            y = l.resolution();
            d.setSecondMembre(y);
            z = d.resolution();
            r.setSecondMembre(z);
            x = r.resolution();
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la résolution");
        }
        return x;
    }

    public Vecteur resolutionPartielle() {
        Vecteur x = new Vecteur(getOrdre());
        Vecteur y = new Vecteur(getOrdre());
        Vecteur z = new Vecteur(getOrdre());
        try {
            l.setSecondMembre(getSecondMembre());
            y = l.resolution();
            d.setSecondMembre(y);
            z = d.resolution();
            r.setSecondMembre(z);
            x = r.resolution();
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la résolution");
        }
        return x;
    }

    public SysTriangInfUnite getL() {
        return l;
    }

    public SysDiagonal getD() {
        return d;
    }

    public SysTriangSupUnite getR() {
        return r;
    }

    public static void main(String[] args) throws IrregularSysLinException {
        Matrice matrice = new Matrice("./resources/matrice1.txt");
        Vecteur secondMembre = new Vecteur(new double[] {3, 5, 8});

        Helder helder = new Helder(matrice, secondMembre);
        Vecteur solution = helder.resolution();

        System.out.println("la matrice L :\n" + helder.getL().getMatriceSystem().toString());
        System.out.println("la matrice D :\n " + helder.getD().getMatriceSystem().toString());
        System.out.println("la matrice R :\n " + helder.getR().getMatriceSystem().toString());
        System.out.println("Solution du système : " + solution.toString());
    }
}
