package AlgLin;

/**
 * Classe qui permet de manipuler les méthodes d'interpolation par spline
 * cubique pour des fonctions réelles d'une variable réelle.
 * 
 * @author DIALLO Mamadou Aliou
 * 
 */
public class Spline {
	// Attributs
	private double[] abX;
	private double[] ordY;
	private Vecteur deriveeSeconde;

	// Constructeur
	public Spline(double[] abscisses, double[] ordonnees) {
		if (abscisses.length != ordonnees.length) {
			throw new IllegalArgumentException("Les tableaux x et y doivent avoir la même longueur");
		}
		if (abscisses.length < 2) {
			throw new IllegalArgumentException("Il faut au moins deux points de support");
		}
		this.abX = abscisses;
		this.ordY = ordonnees;
		deriveeSeconde = calculDeriveeSeconde(abscisses, ordonnees);
	}

	/**
	 * Méthode qui permet de calculer la dérivée seconde de la fonction interpolée
	 * par spline cubique.
	 * 
	 * @throws IrregularSysLinException
	 */
	private Vecteur calculDeriveeSeconde(double[] x, double[] y) {
		int n = x.length;
		Vecteur g = new Vecteur(n + 2);
		double[] a = new double[n];
		double[] b = new double[n];
		double[] c = new double[n];
		double[] d = new double[n];

		g.remplacecoef(0, 0);
		g.remplacecoef(n - 1, 0);

		// Compute a, b, c, d
		b[0] = 2 * (x[2] - x[0]);
		c[0] = x[2] - x[1];
		d[0] = 6 * ((y[2] - y[1]) / (x[2] - x[1]) - (y[1] - y[0]) / (x[1] - x[0]));

		for (int j = 2; j <= n - 2; j++) {
			a[j] = c[j - 1];
			b[j] = 2 * (x[j + 1] - x[j - 1]);
			c[j] = x[j + 1] - x[j];
			d[j] = 6 * ((y[j + 1] - y[j]) / d[j - 1] - (y[j] - y[j - 1]) / a[j]);
		}
		a[n - 1] = c[n - 2];
		b[n - 1] = 2 * (x[n - 1] - x[n - 3]);
		d[n - 1] = 6 * ((y[n - 1] - y[n - 2]) / (x[n - 1] - x[n - 2]) - (y[n - 2] - y[n - 3]) / a[n - 2]);

		double[][] tab = { c, b, a }; //c : sous-diagonale, b : diagonale, a : sur-diagonale
		Vecteur dVect = new Vecteur(d);
		Mat3Diag diag = new Mat3Diag(tab);
		System.out.println("Mat3Diag : \n" + diag.toString()); 
		Thomas thomas = null;
		try {
			thomas = new Thomas(diag, dVect);
		} catch (IrregularSysLinException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Vecteur gbis = null;
		try {
			gbis = thomas.resolution();
		} catch (IrregularSysLinException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for (int i = 1; i < n; i++) {
			g.remplacecoef(i, gbis.getCoeff(i - 1));
		}
		System.out.println("derivéeSeconde = " + g.toString());
		return g;
	}

	/**
	 * Méthode qui permet d'évaluer la fonction interpolée par spline cubique en un
	 * point donné.
	 */
	public double evaluate(double val) throws DataOutOfRangeException {
		// Vérification si la valeur x est dans l'intervalle des abscisses des points de
		// support
		if (val < abX[0] || val > abX[abX.length - 1]) {
			throw new DataOutOfRangeException("La valeur fournie n'est pas dans l'intervalle.");
		}
		// ..
		return val;
	}

	public static void main(String[] args) {
		double[] abscisses = { 1.0, 2.0, 3.0, 4.0, 5.0 };
		double[] ordonnees = { 3.0, 1.0, 4.0, 2.0, 5.0 };

		try {
			Spline spline = new Spline(abscisses, ordonnees);
			//System.out.println("Dérivées secondes : " + spline.calculDeriveeSeconde(abscisses, ordonnees).toString());
		} catch (IllegalArgumentException e) {
			System.out.println("Erreur : " + e.getMessage());
		}
	}

}
