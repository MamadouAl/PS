package AlgLin;

public class Helder extends SysLin {
	
	public Helder(Matrice m, Vecteur v) throws IrregularSysLinException {
		super(m, v);
	}
	
	public void factorLDR0() throws IrregularSysLinException {
		SysTriangInfUnite L = new SysTriangInfUnite(matriceSystem, secondMembre); 
		SysDiagonal D = new SysDiagonal(matriceSystem, L.resolution()); 
		SysTriangSupUnite R = new SysTriangSupUnite(matriceSystem, D.resolution()); 
		
		Matrice.verif_produit(matriceSystem, L.matriceSystem); // on verifie que le produit est possible
        Matrice.produit(matriceSystem, L.matriceSystem); // on effectue le produit matriceSystem * L
        Matrice.verif_produit(matriceSystem, D.matriceSystem);
        Matrice.produit(matriceSystem, D.matriceSystem); // on effectue le produit matriceSystem * D
        Matrice.verif_produit(matriceSystem, R.matriceSystem); 
        Matrice.produit(matriceSystem, R.matriceSystem);		// on effectue le produit matriceSystem * R
	}
	
	public void factorLDR() {
        int n = getOrdre();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                double sumL = 0;
                for (int k = 0; k < j; k++) {
                    sumL += matriceSystem.getCoeff(i, k) * matriceSystem.getCoeff(k, k) * matriceSystem.getCoeff(k, j);
                }
                matriceSystem.remplacecoef(i, j, 1.0 / matriceSystem.getCoeff(j, j) * (matriceSystem.getCoeff(i, j) - sumL));
            }

            double sumD = 0;
            for (int k = 0; k < i; k++) {
                sumD += matriceSystem.getCoeff(i, k) * matriceSystem.getCoeff(k, k) * matriceSystem.getCoeff(k, i);
            }
            matriceSystem.remplacecoef(i, i, matriceSystem.getCoeff(i, i) - sumD);

            for (int j = i + 1; j < n; j++) {
                double sumR = 0;
                for (int k = 0; k < i; k++) {
                    sumR += matriceSystem.getCoeff(i, k) * matriceSystem.getCoeff(k, k) * matriceSystem.getCoeff(k, j);
                }
                matriceSystem.remplacecoef(i, j, 1.0 / matriceSystem.getCoeff(i, i) * (matriceSystem.getCoeff(i, j) - sumR));
            }
        }
    }

	@Override
	public Vecteur resolution() throws IrregularSysLinException {
		factorLDR(); //on factorise la matrice en LDLx = b
		SysTriangInfUnite L = new SysTriangInfUnite(matriceSystem, getSecondMembre()); // ly = b
		SysDiagonal D = new SysDiagonal(matriceSystem, L.resolution()); // dz = y
		SysTriangSupUnite R = new SysTriangSupUnite(matriceSystem, D.resolution()); // rx = z
		return R.resolution();
	}
	
	/**
	 * public Vecteur resolutionPartielle() qui suppose que la matrice du système est déjà sous
	 * forme factorisée et n'effectue que la résolution des systèmes élémentaires.
	 */
	public Vecteur resolutionPartielle() throws IrregularSysLinException {
		SysTriangInfUnite L = new SysTriangInfUnite(matriceSystem, getSecondMembre()); // ly = b
		SysDiagonal D = new SysDiagonal(matriceSystem, L.resolution()); // dz = y
		SysTriangSupUnite R = new SysTriangSupUnite(matriceSystem, D.resolution()); // rx = z
		return R.resolution();
	}
	
	public static void main(String[] args) throws IrregularSysLinException {
        double[][] tab = {{1, 1, -2}, {4, -2, 1}, {3, -1, 3}};
        
		Matrice mat1 = new Matrice(tab);
		Matrice mat2 = new Matrice("./resources/matrice1.txt");
        System.out.println("Matrice A :\n" + mat2);
        Vecteur vec1 = new Vecteur(new double[] {3, 5, 8});

        
		SysTriangInfUnite L = new SysTriangInfUnite(mat2, vec1);
		System.out.println("Matrice L :\n" + L.matriceSystem);

        Helder H = new Helder(mat2, vec1);
        
        System.out.println("Résultat de Ax = b : " + H.resolution());

/*
        Matrice.verif_produit(mat1, mat2);
        matRes = Matrice.produit(mat1,mat2);
        System.out.println("Resultat de A² :");
        System.out.println(matRes);

        System.out.println("Résultat de A² x= b");
        Helder Hresu = new Helder(matRes,vec1);
        System.out.println(Hresu.resolution());
*/

    }

}
