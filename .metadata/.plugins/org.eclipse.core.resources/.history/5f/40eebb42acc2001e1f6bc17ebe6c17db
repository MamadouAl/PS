package AlgLin;

public class Helder extends SysLin {
	
	public Helder(Matrice m, Vecteur v) throws IrregularSysLinException {
		super(m, v);
	}
	
	public void factorLDR() {
	    int n = getOrdre();
	    Matrice l_bis = new Matrice(n, n);
	    Matrice d_bis = new Matrice(n, n);
	    Matrice r_bis = new Matrice(n, n);

	    // Initialisation des matrices L, D et R
	    for (int i = 0; i < n; i++) {
	        for (int j = 0; j < n; j++) {
	            if (i == j) {
	                d_bis.remplacecoef(i, j, getMatriceSystem().getCoef(i, j));
	                l_bis.remplacecoef(i, j, 1);
	                r_bis.remplacecoef(i, j, 1);
	            } else if (i > j) {
	                l_bis.remplacecoef(i, j, getMatriceSystem().getCoef(i, j));
	            } else {
	                r_bis.remplacecoef(i, j, getMatriceSystem().getCoef(i, j));
	            }
	        }
	    }

	    // Calcul des coefficients de L, D et R
	    for (int i = 0; i < n; i++) {
	        // Calcul de L
	        for (int j = 0; j < i; j++) {
	            double somme = 0;
	            for (int k = 0; k < j; k++) {
	                somme += l_bis.getCoef(i, k) * d_bis.getCoef(k, k) * r_bis.getCoef(k, j);
	            }
	            l_bis.remplacecoef(i, j, (getMatriceSystem().getCoef(i, j) - somme) / d_bis.getCoef(j, j));
	        }

	        // Calcul de D
	        double somme = 0;
	        for (int k = 0; k < i; k++) {
	            somme += l_bis.getCoef(i, k) * d_bis.getCoef(k, k) * r_bis.getCoef(k, i);
	        }
	        d_bis.remplacecoef(i, i, getMatriceSystem().getCoef(i, i) - somme);

	        // Calcul de R
	        for (int j = i + 1; j < n; j++) {
	            somme = 0;
	            for (int k = 0; k < i; k++) {
	                somme += l_bis.getCoef(i, k) * d_bis.getCoef(k, k) * r_bis.getCoef(k, j);
	            }
	            r_bis.remplacecoef(i, j, (getMatriceSystem().getCoef(i, j) - somme) / d_bis.getCoef(i, i));
	        }
	    }

	    // Création des instances de SysTriangInfUnite, SysDiagonal et SysTriangSupUnite
	    try {
	        l = new SysTriangInfUnite(l_bis, getSecondMembre());
	        d = new SysDiagonal(d_bis, getSecondMembre());
	        r = new SysTriangSupUnite(r_bis, getSecondMembre());
	    } catch (IrregularSysLinException e) {
	        System.out.println("Erreur lors de la création des systèmes");
	    }
	}


	@Override
	public Vecteur resolution() throws IrregularSysLinException {
		factorLDR(); //on factorise la matrice en LDLx = b
		SysTriangInfUnite L = new SysTriangInfUnite(matriceSystem, getSecondMembre()); // ly = b
		SysDiagonal D = new SysDiagonal(matriceSystem, L.resolution()); // dz = y
		SysTriangSupUnite R = new SysTriangSupUnite(matriceSystem, D.resolution()); // rx = z
		return R.resolution();
	}
	
	/**
	 * public Vecteur resolutionPartielle() qui suppose que la matrice du système est déjà sous
	 * forme factorisée et n'effectue que la résolution des systèmes élémentaires.
	 */
	public Vecteur resolutionPartielle() throws IrregularSysLinException {
		SysTriangInfUnite L = new SysTriangInfUnite(matriceSystem, getSecondMembre()); // ly = b
		SysDiagonal D = new SysDiagonal(matriceSystem, L.resolution()); // dz = y
		SysTriangSupUnite R = new SysTriangSupUnite(matriceSystem, D.resolution()); // rx = z
		return R.resolution();
	}
	
	public static void main(String[] args) throws IrregularSysLinException {
        double[][] tab = {{1, 1, -2}, {4, -2, 1}, {3, -1, 3}};
		Matrice mat1 = new Matrice(tab);
		Matrice mat2 = new Matrice("./resources/matrice1.txt");
        System.out.println("Matrice A :\n" + mat2);
        Vecteur vec1 = new Vecteur(new double[] {3, 5, 8});
        Helder H = new Helder(mat2, vec1);
        
        System.out.println("Résultat de Ax = b : " + H.resolution());

/*
        Matrice.verif_produit(mat1, mat2);
        matRes = Matrice.produit(mat1,mat2);
        System.out.println("Resultat de A² :");
        System.out.println(matRes);

        System.out.println("Résultat de A² x= b");
        Helder Hresu = new Helder(matRes,vec1);
        System.out.println(Hresu.resolution());
*/

    }

}
