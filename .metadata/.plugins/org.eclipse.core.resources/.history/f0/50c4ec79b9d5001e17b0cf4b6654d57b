package AlgLin;

public class Helder2 extends SysLin {
	private SysTriangInfUnite L;
	private SysDiagonal D;
	private SysTriangSupUnite R;

	public Helder2(Matrice matrice, Vecteur secondMembre) throws IrregularSysLinException {
		super(matrice, secondMembre);
	}
	
	/**
	 * Permet de factoriser la matrice A en L, D et R
	 */
	public void factorLDR2() {
		int degre = getOrdre();
		Matrice Li_ = new Matrice(degre, degre);
		Matrice Di_ = new Matrice(degre, degre);
		Matrice Ri_ = new Matrice(degre, degre);
		Matrice A = getMatriceSystem();

		// Initialisation de L, D et R
		for (int i = 0; i < degre; i++) {
			for (int j = 0; j < degre; j++) {
				if (i == j) {
					Di_.remplacecoef(i, j, A.getCoeff(i, j)); 
					Li_.remplacecoef(i, j, 1);
					Ri_.remplacecoef(i, j, 1);
				} else if (i > j) {
					Li_.remplacecoef(i, j, A.getCoeff(i, j));
				} else {
					Ri_.remplacecoef(i, j, A.getCoeff(i, j));
				}
			}
		}

		// Calcul des coefficients L, D et R en utilisant l'algo du TD
		for (int i = 0; i < degre; i++) {
			for (int j = 0; j < i; j++) {
				// Calcul des coefficients de L
				double sumL = 0;
				for (int k = 0; k < j; k++) {
					sumL += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, j);
				}
				Li_.remplacecoef(i, j, (A.getCoeff(i, j) - sumL) / Di_.getCoeff(j, j));
			}

			// Calcul des coefficients de D
			double sumD = 0;
			for (int k = 0; k < i; k++) {
				sumD += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, i);
			}
			Di_.remplacecoef(i, i, A.getCoeff(i, i) - sumD);

			// Calcul des coefficients de R
			for (int j = i + 1; j < degre; j++) {
				double sumR = 0;
				for (int k = 0; k < i; k++) {
					sumR += Li_.getCoeff(i, k) * Di_.getCoeff(k, k) * Ri_.getCoeff(k, j);
				}
				Ri_.remplacecoef(i, j, (A.getCoeff(i, j) - sumR) / Di_.getCoeff(i, i));
			}
		}

		// Création des systèmes correspondants
		try {
			L = new SysTriangInfUnite(Li_, getSecondMembre());
			D = new SysDiagonal(Di_, getSecondMembre());
			R = new SysTriangSupUnite(Ri_, getSecondMembre());
		} catch (IrregularSysLinException e) {
			System.out.println("Erreur lors de la création des systèmes");
		}
	}
	
	/**
	 * Permet de faire la résolution partielle
	 */
	//@Override
	public Vecteur resolution2() {
		factorLDR();
		Vecteur x = new Vecteur(getOrdre());
		Vecteur y = new Vecteur(getOrdre());
		Vecteur z = new Vecteur(getOrdre());
		try {
			L.setSecondMembre(getSecondMembre()); 
			y = L.resolution(); //Ly = b
			D.setSecondMembre(y); 
			z = D.resolution(); //Dz = y
			R.setSecondMembre(z);
			x = R.resolution(); //Rx = z
		} catch (IrregularSysLinException e) {
			System.out.println("Erreur lors de la résolution");
		}
		return x;
	}
	
	/**
	 * Permet de faire la résolution partielle
	 */
	public Vecteur resolutionPartielle() {
		Vecteur x = new Vecteur(getOrdre());
		Vecteur y = new Vecteur(getOrdre());
		Vecteur z = new Vecteur(getOrdre());
		try {
			L.setSecondMembre(getSecondMembre());
			y = L.resolution();
			D.setSecondMembre(y);
			z = D.resolution();
			R.setSecondMembre(z);
			x = R.resolution();
		} catch (IrregularSysLinException e) {
			System.out.println("Erreur lors de la résolution");
		}
		return x;
	}

	public void setSecondMembre2(Vecteur newSecondMembre) {
		super.setSecondMembre(newSecondMembre);
		L.setSecondMembre(newSecondMembre);
		D.setSecondMembre(newSecondMembre);
		R.setSecondMembre(newSecondMembre);
	}
	
	
	public void factorLDR() {
        int degre = getOrdre();
        Matrice A = getMatriceSystem();

        for (int i = 0; i < degre; i++) {
			for (int j = 0; j < i; j++) {
				// Calcul des coefficients de L
				double sumL = 0;
				for (int k = 0; k < j; k++) {
					sumL += A.getCoeff(i, k) * A.getCoeff(k, k) * A.getCoeff(k, j);
				}
				A.remplacecoef(i, j, (A.getCoeff(i, j) - sumL) / A.getCoeff(j, j));
			}

			// Calcul des coefficients de D
			double sumD = 0;
			for (int k = 0; k < i; k++) {
				sumD += A.getCoeff(i, k) * A.getCoeff(k, k) * A.getCoeff(k, i);
			}
			A.remplacecoef(i, i, A.getCoeff(i, i) - sumD);

			// Calcul des coefficients de R
			for (int j = i + 1; j < degre; j++) {
				double sumR = 0;
				for (int k = 0; k < i; k++) {
					sumR += A.getCoeff(i, k) * A.getCoeff(k, k) * A.getCoeff(k, j);
				}
				A.remplacecoef(i, j, (A.getCoeff(i, j) - sumR) / A.getCoeff(i, i));
			}
		}
    }
    
    /**
     * Permet de faire la résolution partielle
     */
    @Override
    public Vecteur resolution() {
        factorLDR();
        Vecteur x = new Vecteur(getOrdre());
        Vecteur y = new Vecteur(getOrdre());
        Vecteur z = new Vecteur(getOrdre());
        Matrice A = new Matrice(getOrdre(), getOrdre());
		A.recopie(getMatriceSystem());
        Vecteur secondMembre = getSecondMembre();

        try {
            SysTriangInfUnite L = new SysTriangInfUnite(A, secondMembre);
            SysDiagonal D = new SysDiagonal(A, secondMembre);
            SysTriangSupUnite R = new SysTriangSupUnite(A, secondMembre);

            L.setSecondMembre(getSecondMembre()); 
			y = L.resolution(); //Ly = b
			System.out.println("y : " + y.toString());
			D.setSecondMembre(y); 
			z = D.resolution(); //Dz = y
			System.out.println("z : " + z.toString());
			R.setSecondMembre(z);
			x = R.resolution(); //Rx = z
			System.out.println("x : " + x.toString());
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la résolution");
        }
        return x;
    }

    /**
     * Permet de faire la résolution partielle
     */
    /*
    public Vecteur resolutionPartielle() {
        Vecteur x = new Vecteur(getOrdre());
        Vecteur y = new Vecteur(getOrdre());
        Vecteur z = new Vecteur(getOrdre());
        try {
            y = SysTriangInfUnite.resolution(getMatriceSystem(), getSecondMembre());
            z = SysDiagonal.resolution(getMatriceSystem(), y);
            x = SysTriangSupUnite.resolution(getMatriceSystem(), z);
        } catch (IrregularSysLinException e) {
            System.out.println("Erreur lors de la résolution");
        }
        return x;
    }
    */

    public void setSecondMembre(Vecteur newSecondMembre) {
        super.setSecondMembre(newSecondMembre);
    }

	public static void main(String[] args) throws Exception {
		// Cas 1 : Ax = b
		System.out.println("Cas 1 : Ax = b");
		Matrice matrice = new Matrice("./resources/matrice1.txt");
		Vecteur secondMembre = new Vecteur("./resources/secondMembre.txt");

		Helder2 helder = new Helder2(matrice, secondMembre);
		Vecteur solution = helder.resolution();

		// Cas 2 : A²x = b
		System.out.println("\nCas 2 : A²x = b");
		Vecteur y = solution;//y tel que Ay =b
		Helder2 helder2 = new Helder2(matrice, y); //Ax =y
		Vecteur solutionX = helder2.resolution();
		System.out.println("Solution x de A²x = b : " + solutionX.toString());
	
		//Cas 3 : Ax - b
		System.out.println("\nCas 3 : Ax - b");
		Vecteur Ax = Vecteur.produit(matrice, solution);
		System.out.println("Ax : " + Ax.toString());
		helder.setSecondMembre(new Vecteur("./resources/secondMembre2.txt"));
		System.out.println("-b : " + helder.getSecondMembre().toString());
		
		Vecteur Ax_b = Vecteur.addition(Ax, helder.getSecondMembre());
		Vecteur norme = new Vecteur(Ax_b.nbLigne());
		
		// Test de la norme
		double normeL1 = Vecteur.normeL1(Ax_b);
		if (normeL1 - 0.0 < Matrice.EPSILON) {
			System.out.println("\nLa norme L1 du vecteur est nulle ou très petite");
		}
		double normeL2 = Vecteur.normeL2(Ax_b);
		if (normeL2 - 0.0 < Matrice.EPSILON) {
			System.out.println("La norme L2 du vecteur est nulle ou très petite");
		}
		double normeInf = Vecteur.normeLinfini(Ax_b);
		if (normeInf - 0.0 < Matrice.EPSILON) {
			System.out.println("La norme infinie du vecteur est nulle ou très petite");
		}
	}
}
