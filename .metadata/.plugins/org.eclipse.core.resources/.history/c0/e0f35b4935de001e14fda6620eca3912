
public class Thomas extends SysLin {

	public Thomas(Mat3Diag m, Vecteur v) throws IrregularSysLinException {
		super(m, v);
	}

	/**
	 * Permet de faire la résolution d'un système tridiagonal avec la méthode de
	 * Thomas
	 */
	@Override
	public Vecteur resolution() {
		int n = secondMembre.nbLigne();
		Vecteur p = new Vecteur(n);
		Vecteur q = new Vecteur(n);
		Vecteur solution = new Vecteur(n);

		// 1- Calcul de p1 et q1
		p.remplacecoef(0, -matriceSystem.getCoeff(2, 0) / matriceSystem.getCoeff(1, 0));
		q.remplacecoef(0, secondMembre.getCoeff(0) / matriceSystem.getCoeff(1, 0));

		// 2- Calcul de pk et qk pour k allant de 2 à n - 1
		for (int k = 1; k <= n - 2; k++) {
			double beta = matriceSystem.getCoeff(0, k) * p.getCoeff(k - 1) + matriceSystem.getCoeff(1, k);
			p.remplacecoef(k, -matriceSystem.getCoeff(2, k) / beta);
			q.remplacecoef(k, (secondMembre.getCoeff(k) - matriceSystem.getCoeff(0, k) * q.getCoeff(k - 1)) / beta);
		}

		// 3- Calcul de xn
		double an = matriceSystem.getCoeff(0, n - 1);
		double bn = matriceSystem.getCoeff(1, n - 1);
		double dn = secondMembre.getCoeff(n - 1);
		solution.remplacecoef(n - 1, (dn - an * q.getCoeff(n - 2)) / (an * p.getCoeff(n - 2) + bn));

		// 4- Calcul de xk pour k allant de n - 1 à 1
		for (int k = n - 2; k >= 0; k--) {
			solution.remplacecoef(k, p.getCoeff(k) * solution.getCoeff(k + 1) + q.getCoeff(k));
		}
		return solution;
	}
	
	//@Override
	public Vecteur resolution_verif() throws IrregularSysLinException {
	    int n = secondMembre.nbLigne();
	    if (matriceSystem.nbLigne() != 3 || matriceSystem.nbColonne() != n || n != secondMembre.nbLigne()) {
	        throw new IrregularSysLinException("Taille incorrecte de la matrice ou du vecteur du second membre.");
	    }

	    Vecteur p = new Vecteur(n);
	    Vecteur q = new Vecteur(n);
	    Vecteur solution = new Vecteur(n);

	    // Calcul de p1 et q1
	    double b1 = matriceSystem.getCoeff(1, 0);
	    if (b1 == 0) {
	        throw new IrregularSysLinException("Division par zéro : le dénominateur est nul.");
	    }
	    p.remplacecoef(0, -matriceSystem.getCoeff(2, 0) / b1);
	    q.remplacecoef(0, secondMembre.getCoeff(0) / b1);

	    // Calcul de pk et qk pour k allant de 2 à n - 1
	    for (int k = 1; k <= n - 2; k++) {
	        double beta = matriceSystem.getCoeff(0, k) * p.getCoeff(k - 1) + matriceSystem.getCoeff(1, k);
	        if (beta == 0) {
	            throw new IrregularSysLinException("Division par zéro : le dénominateur est nul.");
	        }
	        p.remplacecoef(k, -matriceSystem.getCoeff(2, k) / beta);
	        q.remplacecoef(k, (secondMembre.getCoeff(k) - matriceSystem.getCoeff(0, k) * q.getCoeff(k - 1)) / beta);
	    }

	    // Calcul de xn
	    double an = matriceSystem.getCoeff(0, n - 1);
	    double bn = matriceSystem.getCoeff(1, n - 1);
	    double dn = secondMembre.getCoeff(n - 1);
	    double denom = an * p.getCoeff(n - 2) + bn;
	    if (denom == 0) {
	        throw new IrregularSysLinException("Division par zéro : le dénominateur est nul.");
	    }
	    solution.remplacecoef(n - 1, (dn - an * q.getCoeff(n - 2)) / denom);

	    // Calcul de xk pour k allant de n - 1 à 1
	    for (int k = n - 2; k >= 0; k--) {
	        solution.remplacecoef(k, p.getCoeff(k) * solution.getCoeff(k + 1) + q.getCoeff(k));
	    }

	    return solution;
	}
	
	public Vecteur resolution2() throws IrregularSysLinException {

        if (Math.abs(getMatriceSystem().getCoeff(0, 1)) < Matrice.EPSILON) {
            throw new IrregularSysLinException("La matrice système est irrégulière.");
        }
        int n = getMatriceSystem().nbColonne();
        Vecteur a = new Vecteur(n - 1);
        Vecteur b = new Vecteur(n);
        Vecteur c = new Vecteur(n - 1);

        for (int i = 0; i < n; i++) {
            if (i < n - 1)
                a.remplacecoef(i, getMatriceSystem().getCoeff(0, i));
            b.remplacecoef(i, getMatriceSystem().getCoeff(1, i));
            if (i > 0)
                c.remplacecoef(i - 1, getMatriceSystem().getCoeff(2, i));
        }

        Vecteur d = getSecondMembre();
        Vecteur p = new Vecteur(n);
        Vecteur q = new Vecteur(n);
        // calcul de p0 et q0
        p.remplacecoef(0, (-1) * c.getCoeff(0) / b.getCoeff(0));
        q.remplacecoef(0, d.getCoeff(0) / b.getCoeff(0));
        // calcul de p1 et q1
        q.remplacecoef(1, (d.getCoeff(1) - a.getCoeff(1) * q.getCoeff(0)) / (b.getCoeff(1) + a.getCoeff(1) * p.getCoeff(0)));
        p.remplacecoef(1, (-1) * c.getCoeff(1) / (b.getCoeff(1) + a.getCoeff(1) * p.getCoeff(0)));

        // calcul pk et qk 
        for (int i = 1; i < n - 1; i++) {
            double alpha = b.getCoeff(i) + a.getCoeff(i) * p.getCoeff(i - 1);
            q.remplacecoef(i, (d.getCoeff(i) - a.getCoeff(i) * q.getCoeff(i - 1)) / alpha);
            p.remplacecoef(i, (-1) * c.getCoeff(i - 1) / alpha);
        }
    
        Vecteur x = new Vecteur(n);
        // calcul de xn-1
        x.remplacecoef(n - 1, (d.getCoeff(n - 1) - a.getCoeff(n - 2) * q.getCoeff(n - 2))
                / (b.getCoeff(n - 1) + a.getCoeff(n - 2) * p.getCoeff(n - 2)));
        //remontée de la solution        
        for (int i = n - 2; i >= 0; i--) {
            x.remplacecoef(i, p.getCoeff(i) * x.getCoeff(i + 1) + q.getCoeff(i));
        }
        return x;
    }


	public static void main(String[] args) throws IrregularSysLinException {
		System.out.println("*** Methode de Thomas ***\n");
		double[][] tableau0 = { { 0, 1, 2, 3 }, { 2, 3, 2, 1 }, { 2, 1, 2, 0 } };
		Mat3Diag mat3DiagA = new Mat3Diag(tableau0);
		Vecteur vect = new Vecteur(new double[] { 1, 2, 3, 4 });
		Thomas thomas = new Thomas(mat3DiagA, vect);
		System.out.println("Matrice A : \n" + mat3DiagA);
		Vecteur solutionX = thomas.resolution2();
		System.out.println("Solution x : " + solutionX);

		Vecteur Ax = Mat3Diag.produit(mat3DiagA, solutionX);
		Vecteur _b = new Vecteur(new double[] { -1, -2, -3, -4 });
		System.out.println("Ax : " + Ax);
		System.out.println("- b : " + _b);
		Vecteur Ax_b = Vecteur.addition(Ax, _b);

		// Calcul des normes
		double normeL1 = Vecteur.normeL1(Ax_b);
		double normeL2 = Vecteur.normeL2(Ax_b);
		double normeLinf = Vecteur.normeLinfini(Ax_b);

		System.out.println("\nNormeL1(Ax-b) = " + normeL1);
		System.out.println("NormeL2(Ax-b) = " + normeL2);
		System.out.println("NormeLinf(Ax-b) = " + normeLinf);

	}
}
